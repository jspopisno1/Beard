The compiled template will locate in an object called <b>Btpls</b>.
<p>
A compiled template is a callable object. For instance, there is a template
called 'Tmpl'. You can call it like this <b>Btpls.Tmpl(data)</b>, and this will return
you the rendered html text.
<p>
Another useful usage is that <b>Btpls.Tmpl.$(data)</b> will return you a
jQuery object. It is quite useful, if you want to bind data to the html, or you
can append the html to the page, and call Beard.bindData( [the selector] ) to bind
data to dom elements.
<p>
Finally, <b>Btpls.Tmpl.bn(data)</b> will render the template into a BeardNode Object.
This part requires beard-advanced.js. You can learn more in the Advanced section.
<p>
If you call <b>Btpls.Tmpl.p()</b>, you will get the parent template of <b>Tmpl</b>.
Previously we talked about the magical variable <b>t</b>. It is in fact the current
template object.

***
<div beard='Root'>
    <!--@ <div class='root' [`` bind(d) `]>This is a div in template Root.
        <input type='button' value='click me' onclick='itemClicked(this)'/>
    </div> @-->
    <div beard='Sub'>
        <!--@ <div class='sub' [`` bind(d) `]'>This is a div in template Sub
            <input type='button' value='click me' onclick='itemClicked(this)'/>
        </div> @-->
    </div>
</div>
***
Beard.load();

window.itemClicked = function(btn){
    var data = $(btn).dataUp('div');
    data.$.after('<div> Clicked~ the data bound is : ' + data.val + '</div>');
}

***
var data =  ''
result = false;

html = Btpls.Root('root object');
html += '\n\n';

html += Btpls.Root.Sub('sub object');
html += '\n\n';

html += Btpls.Root.Sub.p()('sub object');
html += '\n\n';

// The funny attributes inside the div are for binding data
// But note that the html here is plain text, so no data was bound to it.
$result.append($('<pre></pre>').text(html));
$result.append('<br/><br/>');

// now we generate jQuery object with data bound
Btpls.Root.$('root object').appendTo($result)
Btpls.Root.Sub.$('sub object').appendTo($result)
Btpls.Root.Sub.p().$('root object').appendTo($result)