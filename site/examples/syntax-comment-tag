From this example, we will start learning Beard.js.
First of all, the template syntax !!
<div style='margin:18px 0 5px'>
<b>[`` some js expr `]</b> :
Assignment Tag
</div>
<i>something like &lt;?= ?> or &lt;%= %> ..</i>

<div style='margin:18px 0 5px'>
<b>[`/ some js expr `]</b> :
Assignment Tag (with the content escaped)
</div>
<i> equals to [`` some js expr `], except for Beard will escape the content
before output to the stream </i>


<div style='margin:18px 0 5px'>
<b>[## plain js code #]</b> :
Evaluate Tag
</div>
<i> something like &lt;? ?> or &lt;% %> </i>

<div style='margin:18px 0 5px'>
<b>[// comment text /]</b> :
Evaluate Tag
</div>
<i> something like &lt;? ?> or &lt;% %> </i>

<div style='margin:18px 0 5px'>
<b>[/// comment text /]</b> :
Evaluate Tag
</div>
<i> Will output comment text as  &lt;!-- comment text --&gt; Keep in mind that if you
are not loading templates using pure text or json object.
&lt;!--@ @--&gt; will be used to enclose your template in the html. Therefore, it is illegal to
place another &lt;!-- --&gt; inside this scope. If you really want to output a comment,
use html comment tag instead. </i>
***
<!-- In this example we will use loadScript() to load template from a plain text,
instead of from a block of HTML. -->
***
Beard.loadScript(
    '   [// a comment string /] ' +
    '   [/// an html comment string /]' +
    '   unescaped : [`` d.raw `]<br/> ' +
    '   escaped : [`/ d.esc `] <br/> ' +
    '   [## if(d.isCool) { #] cool [## }#] '
,'Syntax');

***
var data =  {
    raw: '<b>bold</b>',
    esc: '<b>bold</b>',
    isCool: true
}

result = Btpls.Syntax(data);
